High-Level Architecture: Diagram

Service Boundaries
order-manage-api: Business logic
order-manage-data-api: Data access layer
order-stream-process: service to process call update inventory to shopify

Description:
As High level Architecture we have steps
1.get webhook
2.validate order: check that is it the same orderid,order must not found
3.check inventory in WMS
4.update DB and publish message
5.callback to update inventory at shopify
In this design we have synchronous and asynchronous
Api from webhook in shopify is synchronous but call back to update inventory in shopify is asynchronous. and we use kafka as a queue to decoupling the system

Communication: rest API

api design and datamapping: api_request_response.json

data consistency & race conditions: in this design we make api idempotent by checking orderid if it repeat we reject
in race conditions we use pessimistic in order-manage-data-api to commit the transaction so if any concurrent to the same product to get the same data it will not have case that oversell

Data Modeling:
we have 3 tables: see details of table in api_request_response.json
1.order: order which is 1 to 1
2.order_detail: which is 1 order and 1 record with 1 product in that order
3.inventory: inventory Available Amount of each product

Error Handling: In error handling we can do many ways
1.hold delay - we save in cache that WMS is down and set ttl as 1 min this time we return error back and not to call WMS,when the key is loss we can call wms again
2.retry 3 times - retry at that time and if no response return error
3.use kafka to retry: send error message to kafka topic and create retry service to retry calling(but in this case it is synchronous we cannot use)
for retry we use the simplest way as retries 3 times and return error if not response



in this highlighted add step to readme.md 
1.build and start all involving service
2.initial data for db and mocking data
3.call test in these scenario and add description of each test case
3.1 success with only 1 product with 1 quantity
3.2 success with 3 product with every product remainingitem more than quantity
3.3 success with 5 product with every product remainingitem more than quantity
3.4 fail with orderid repeat
3.5 fail with 1 product but not have product in db
3.6 fail with 2 product but 1 not have product in db
3.7 fail with 2 product with 1 of them has not enough remainingitem
4.in success case command to see logs that it success in every pods






